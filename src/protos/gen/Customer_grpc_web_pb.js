/**
 * @fileoverview gRPC-Web generated client stub for Customer
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.1
// source: Customer.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.Customer = require('./Customer_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.Customer.CustomerSvcClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.Customer.CustomerSvcPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.EmptyUserRequest,
 *   !proto.Customer.ListOfUsersResponse>}
 */
const methodDescriptor_CustomerSvc_GetAllUsers = new grpc.web.MethodDescriptor(
  '/Customer.CustomerSvc/GetAllUsers',
  grpc.web.MethodType.UNARY,
  proto.Customer.EmptyUserRequest,
  proto.Customer.ListOfUsersResponse,
  /**
   * @param {!proto.Customer.EmptyUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.ListOfUsersResponse.deserializeBinary
);


/**
 * @param {!proto.Customer.EmptyUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.ListOfUsersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.ListOfUsersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerSvcClient.prototype.getAllUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerSvc/GetAllUsers',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_GetAllUsers,
      callback);
};


/**
 * @param {!proto.Customer.EmptyUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.ListOfUsersResponse>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerSvcPromiseClient.prototype.getAllUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerSvc/GetAllUsers',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_GetAllUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerRequest,
 *   !proto.Customer.CustomerResponse>}
 */
const methodDescriptor_CustomerSvc_CreateUser = new grpc.web.MethodDescriptor(
  '/Customer.CustomerSvc/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerRequest,
  proto.Customer.CustomerResponse,
  /**
   * @param {!proto.Customer.CustomerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerResponse.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerSvcClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerSvc/CreateUser',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_CreateUser,
      callback);
};


/**
 * @param {!proto.Customer.CustomerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerResponse>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerSvcPromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerSvc/CreateUser',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerRequest,
 *   !proto.Customer.CustomerResponse>}
 */
const methodDescriptor_CustomerSvc_UpdateUser = new grpc.web.MethodDescriptor(
  '/Customer.CustomerSvc/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerRequest,
  proto.Customer.CustomerResponse,
  /**
   * @param {!proto.Customer.CustomerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerResponse.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerSvcClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerSvc/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_UpdateUser,
      callback);
};


/**
 * @param {!proto.Customer.CustomerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerResponse>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerSvcPromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerSvc/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerLoginRequest,
 *   !proto.Customer.CustomerLoginResponse>}
 */
const methodDescriptor_CustomerSvc_LoginCustomer = new grpc.web.MethodDescriptor(
  '/Customer.CustomerSvc/LoginCustomer',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerLoginRequest,
  proto.Customer.CustomerLoginResponse,
  /**
   * @param {!proto.Customer.CustomerLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerLoginResponse.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerLoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerLoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerSvcClient.prototype.loginCustomer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerSvc/LoginCustomer',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_LoginCustomer,
      callback);
};


/**
 * @param {!proto.Customer.CustomerLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerLoginResponse>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerSvcPromiseClient.prototype.loginCustomer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerSvc/LoginCustomer',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_LoginCustomer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerLoginRequest,
 *   !proto.Customer.CustomerResponse>}
 */
const methodDescriptor_CustomerSvc_ResetPassword = new grpc.web.MethodDescriptor(
  '/Customer.CustomerSvc/ResetPassword',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerLoginRequest,
  proto.Customer.CustomerResponse,
  /**
   * @param {!proto.Customer.CustomerLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerResponse.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerSvcClient.prototype.resetPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerSvc/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_ResetPassword,
      callback);
};


/**
 * @param {!proto.Customer.CustomerLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerResponse>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerSvcPromiseClient.prototype.resetPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerSvc/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_ResetPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.ChangeCustomerRequest,
 *   !proto.Customer.CustomerResponse>}
 */
const methodDescriptor_CustomerSvc_ChangePassword = new grpc.web.MethodDescriptor(
  '/Customer.CustomerSvc/ChangePassword',
  grpc.web.MethodType.UNARY,
  proto.Customer.ChangeCustomerRequest,
  proto.Customer.CustomerResponse,
  /**
   * @param {!proto.Customer.ChangeCustomerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerResponse.deserializeBinary
);


/**
 * @param {!proto.Customer.ChangeCustomerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerSvcClient.prototype.changePassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerSvc/ChangePassword',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_ChangePassword,
      callback);
};


/**
 * @param {!proto.Customer.ChangeCustomerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerResponse>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerSvcPromiseClient.prototype.changePassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerSvc/ChangePassword',
      request,
      metadata || {},
      methodDescriptor_CustomerSvc_ChangePassword);
};


module.exports = proto.Customer;

